// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeslaACDC.Data;

#nullable disable

namespace TeslaACDC.Data.Migrations
{
    [DbContext(typeof(TeslaContext))]
    [Migration("20250325112025_DeleteTableNarradorAndIdioma")]
    partial class DeleteTableNarradorAndIdioma
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Audiolibro", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Duracion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("duracion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("idioma");

                    b.Property<string>("Narrador")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("narrador");

                    b.Property<string>("TamañoMB")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tamaño_m_b");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titulo");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("id");

                    b.ToTable("audiolibro", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.AudiolibroAutor", b =>
                {
                    b.Property<int>("AudiolibroId")
                        .HasColumnType("integer")
                        .HasColumnName("audiolibro_id");

                    b.Property<int>("AutorId")
                        .HasColumnType("integer")
                        .HasColumnName("autor_id");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.HasKey("AudiolibroId", "AutorId");

                    b.HasIndex("AutorId");

                    b.ToTable("audiolibro_autor", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.AudiolibroGenero", b =>
                {
                    b.Property<int>("AudiolibroId")
                        .HasColumnType("integer")
                        .HasColumnName("audiolibro_id");

                    b.Property<int>("GeneroId")
                        .HasColumnType("integer")
                        .HasColumnName("genero_id");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.HasKey("AudiolibroId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("audiolibro_genero", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Autor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apellidos");

                    b.Property<string>("Biografia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("biografia");

                    b.Property<bool>("EstaVivo")
                        .HasColumnType("boolean")
                        .HasColumnName("esta_vivo");

                    b.Property<DateOnly?>("FechaMuerte")
                        .HasColumnType("date")
                        .HasColumnName("fecha_muerte");

                    b.Property<DateOnly?>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("idioma");

                    b.Property<string>("Nacionalidad")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nacionalidad");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pais");

                    b.Property<string>("Seudonimo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("seudonimo");

                    b.HasKey("id");

                    b.ToTable("autor", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.AutorGenero", b =>
                {
                    b.Property<int>("AutorId")
                        .HasColumnType("integer")
                        .HasColumnName("autor_id");

                    b.Property<int>("GeneroId")
                        .HasColumnType("integer")
                        .HasColumnName("genero_id");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.HasKey("AutorId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("autor_genero", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Descarga", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("AudiolibroId")
                        .HasColumnType("integer")
                        .HasColumnName("audiolibro_id");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha");

                    b.Property<int>("LibroId")
                        .HasColumnType("integer")
                        .HasColumnName("libro_id");

                    b.HasKey("id");

                    b.HasIndex("AudiolibroId");

                    b.HasIndex("LibroId");

                    b.ToTable("descarga", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Donacion", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("FechaDonacion")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_donacion");

                    b.Property<string>("MedioPago")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("medio_pago");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("moneda");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric")
                        .HasColumnName("monto");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usuario_id");

                    b.HasKey("id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("donacion", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Escucha", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("AudiolibroId")
                        .HasColumnType("integer")
                        .HasColumnName("audiolibro_id");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha");

                    b.HasKey("id");

                    b.HasIndex("AudiolibroId");

                    b.ToTable("escucha", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Genero", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("id");

                    b.ToTable("genero", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Lectura", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha");

                    b.Property<int>("LibroId")
                        .HasColumnType("integer")
                        .HasColumnName("libro_id");

                    b.HasKey("id");

                    b.HasIndex("LibroId");

                    b.ToTable("lectura", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Libro", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("AnioPublicacion")
                        .HasColumnType("integer")
                        .HasColumnName("anio_publicacion");

                    b.Property<string>("ContraPortada")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contra_portada");

                    b.Property<string>("Edicion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("edicion");

                    b.Property<string>("Editorial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("editorial");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Formato")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("formato");

                    b.Property<string>("ISBN13")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("i_s_b_n13");

                    b.Property<string>("Idioma")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("idioma");

                    b.Property<string>("Portada")
                        .HasColumnType("text")
                        .HasColumnName("portada");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titulo");

                    b.HasKey("id");

                    b.ToTable("libro", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.LibroAutor", b =>
                {
                    b.Property<int>("LibroId")
                        .HasColumnType("integer")
                        .HasColumnName("libro_id");

                    b.Property<int>("AutorId")
                        .HasColumnType("integer")
                        .HasColumnName("autor_id");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.HasKey("LibroId", "AutorId");

                    b.HasIndex("AutorId");

                    b.ToTable("libro_autor", (string)null);
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.LibroGenero", b =>
                {
                    b.Property<int>("LibroId")
                        .HasColumnType("integer")
                        .HasColumnName("libro_id");

                    b.Property<int>("GeneroId")
                        .HasColumnType("integer")
                        .HasColumnName("genero_id");

                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.HasKey("LibroId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("libro_genero", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeslaACDC.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.AudiolibroAutor", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.Audiolibro", "AudioLibro")
                        .WithMany("AudiolibroAutores")
                        .HasForeignKey("AudiolibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeslaACDC.Data.Models.Autor", "Autor")
                        .WithMany("AudiolibroAutores")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioLibro");

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.AudiolibroGenero", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.Audiolibro", "AudioLibro")
                        .WithMany("AudiolibroGeneros")
                        .HasForeignKey("AudiolibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeslaACDC.Data.Models.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioLibro");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.AutorGenero", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.Autor", "Autor")
                        .WithMany("AutorGeneros")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeslaACDC.Data.Models.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Descarga", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.Audiolibro", "Audiolibro")
                        .WithMany()
                        .HasForeignKey("AudiolibroId");

                    b.HasOne("TeslaACDC.Data.Models.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audiolibro");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Donacion", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Escucha", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.Audiolibro", "Audiolibro")
                        .WithMany()
                        .HasForeignKey("AudiolibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audiolibro");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Lectura", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.LibroAutor", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.Autor", "Autor")
                        .WithMany("LibroAutores")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeslaACDC.Data.Models.Libro", "Libro")
                        .WithMany("LibroAutores")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.LibroGenero", b =>
                {
                    b.HasOne("TeslaACDC.Data.Models.Genero", "Genero")
                        .WithMany("LibroGeneros")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeslaACDC.Data.Models.Libro", "Libro")
                        .WithMany("LibroGeneros")
                        .HasForeignKey("LibroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Audiolibro", b =>
                {
                    b.Navigation("AudiolibroAutores");

                    b.Navigation("AudiolibroGeneros");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Autor", b =>
                {
                    b.Navigation("AudiolibroAutores");

                    b.Navigation("AutorGeneros");

                    b.Navigation("LibroAutores");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Genero", b =>
                {
                    b.Navigation("LibroGeneros");
                });

            modelBuilder.Entity("TeslaACDC.Data.Models.Libro", b =>
                {
                    b.Navigation("LibroAutores");

                    b.Navigation("LibroGeneros");
                });
#pragma warning restore 612, 618
        }
    }
}
